// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// datasource db {
//   provider     = "mysql"
//   url          = env("DATABASE_URL")
//   relationMode = "prisma"
// }

// generator client {
//   provider = "prisma-client-js"
// }

// model Store {
//   id String @id @default(uuid())
//   name String
//   userId String
//   billboards Billboard[] @relation("StoreToBillboard")
//   categories Category[] @relation("StoreToCategory")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   sizes Size[] @relation("StoreToSize")
//   colors Color[] @relation("StoreToColor")
//   products Product[] @relation("StoreToProduct")
//   orders Order[] @relation("StoreToOrder")
// }

// model Billboard {
//   id          String @id @default(uuid())
//   storeId     String
//   store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
//   label       String
//   imageUrl    String
//   categories  Category[]
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@index([storeId])
// }

// model Category {
//   id          String      @id @default(uuid())
//   storeId     String      // Foreign Key to Store
//   store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
//   billboardId String      // Foreign Key to Billboard
//   billboard   Billboard   @relation(fields: [billboardId], references: [id])
//   name        String
//   products    Product[]   @relation("CategoryToProduct")
//   createdAt   DateTime    @default(now())
//   updatedAt   DateTime    @updatedAt

//   @@index([storeId])
//   @@index([billboardId])
// }

// model Size {
//   id String @id @default(uuid())
//   storeId String
//   store Store @relation("StoreToSize",fields: [storeId], references: [id])
//   name String
//   value String
//   products Product[] 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//     @@index([storeId])
// }
// model Color {
//   id String @id @default(uuid())
//   storeId String
//   store Store @relation("StoreToColor",fields: [storeId], references: [id])
//   name String
//   value String
//   products Product[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//     @@index([storeId])
// }

// model Product {
//   id String @id @default(uuid())
//   storeId String
//   store Store @relation("StoreToProduct",fields: [storeId], references: [id])
//   categoryId String
//   category Category @relation("CategoryToProduct",fields: [categoryId], references: [id])
//   name String
//   price Decimal
//   // price String
//   isFeatured Boolean @default(false)
//   isArchived Boolean @default(false)
//   sizeId String
//   size Size @relation(fields: [sizeId], references: [id])
//   colorId String
//   color Color @relation(fields: [colorId], references: [id])
//   images Image[]
//   orderItems OrderItem[]
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([storeId])
//   @@index([categoryId])
//   @@index([sizeId])
//   @@index([colorId])
// }

// model Image {
//   id String @id @default(uuid())
//   productId String
//   product Product @relation(fields: [productId], references: [id])
//   url String 
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([productId])
// }

// model Order {
//   id String @id @default(uuid())

//   storeId String
//   store Store @relation("StoreToOrder",fields: [storeId], references: [id])
//   orderItems OrderItem[]
//   isPaid Boolean @default(false)
//   phone String @default("")
//   address String @default("")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   // productId String
//   // product Product @relation(fields: [productId], references: [id])
//   // quantity Int
//   // total Decimal
//   // createdAt DateTime @default(now())
//   // updatedAt DateTime @updatedAt
//   //  userId String
//   // user User @relation(fields: [userId], references: [id])

//   @@index([storeId])
// }

// model OrderItem {
//   id String @id @default(uuid())
//   orderId String
//   order Order @relation(fields: [orderId], references: [id])
//   productId String
//   product Product @relation(fields: [productId], references: [id])

//   @@index([orderId])
//   @@index([productId])
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id           String         @id @default(uuid())
  storeId      String // Foreign Key to Store
  store        Store          @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId   String // Foreign Key to Category
  category     Category       @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  price        Decimal
  quantity     Int            @default(0)
  amount       Int            @default(1)
  isFeatured   Boolean        @default(false)
  isArchived   Boolean        @default(false)
  sizeId       String // Foreign Key to Size
  size         Size           @relation(fields: [sizeId], references: [id])
  colorId      String // Foreign Key to Color
  color        Color          @relation(fields: [colorId], references: [id])
  images       Image[] // Relation to Image model
  orderItems   OrderItem[] // Relation to Order model
  OrderDetails OrderDetails[] // Relation to OrderDetails model
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id           String         @id @default(uuid())
  storeId      String // Foreign Key to Store
  store        Store          @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems   OrderItem[] // Relation to OrderItem model
  isPaid       Boolean        @default(false)
  phone        String         @default("")
  amount       Int            @default(0)
  address      String         @default("")
  email        String         @default("")
  firstName    String         @default("")
  lastName     String         @default("")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orderDetails OrderDetails[] // Relation to OrderDetails model

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])
  amount    Int     @default(1)

  @@index([orderId])
  @@index([productId])
}

model OrderDetails {
  id        String   @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order    @relation(fields: [orderId], references: [id])
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  total     Decimal  @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}
